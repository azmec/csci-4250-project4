const BEEG_CUBE_VERTICES = [
	vec4(-1, 0, 1, 1),
	vec4(-1, 0, -1, 1),
	vec4(1, 0, -1, 1),
	vec4(1, 0, 1, 1),
];

const NUM_COBBLE_VERTICES = 36;

/**
 * Return the points composing the extruded shape generated by the given vertices.
 * Assumes the shape is drawn in the XZ plane. Extrudes the shape along the y-axis.
 * @param {Array}  vertices - The vertices composing the shape-to-be-extruded.
 * @param {number} height   - The distance along which to extrude the shape.
 * @returns The vertices for the shape extruded along the y-axis.
 */
function generatedExtrudedVertices(vertices, height) {
	const NUM_VERTICES = vertices.length;

	// Create the face at the end of the extrusion.
	for (let i = 0; i < NUM_VERTICES; i++) {
		let [x, y, z] = vertices[i];
		vertices.push(vec4(x, y + height, z));
	}

	let points = [];
	let basePoints = [];
	let topPoints = [];

	// Create the side faces.
	for (let i = 0; i < NUM_VERTICES; i++) {
		let a = i;
		let b = i + NUM_VERTICES;
		let c = (i + 1) % NUM_VERTICES + NUM_VERTICES;
		let d = (i + 1) % NUM_VERTICES;

		points.push(vertices[a]);
		points.push(vertices[b]);
		points.push(vertices[c]);

		points.push(vertices[a]);
		points.push(vertices[c]);
		points.push(vertices[d]);
	}

	// Initialize the points for the base-face.
	basePoints.push(vertices[0]);
	for (let i = NUM_VERTICES - 1; i > 0; i--)
		basePoints.push(vertices[i]);

	// Create and append the base-face.
	let basePolygon = generatePolygon(basePoints);
	points = points.concat(basePolygon);

	// Initialize the points for the top-face.
	for (let i = 0; i < NUM_VERTICES; i++)
		topPoints.push(vertices[i + NUM_VERTICES]);

	// Create and append the top-face.
	let topPolygon = generatePolygon(topPoints);
	points = points.concat(topPolygon);

	return points;
}

/**
 * Return the polygon composed of the given vertices.
 * @param {Array} vertices - The vertices with which to compose the polygon.
 * @returns The triangular mesh composing the polygon, as a list of vertices.
 */
function generatePolygon(vertices) {
	let points = [];

	// Push as many triangles as necessary.
	let previous = 1;
	let next = 2;
	for (let i = 0; i < (vertices.length - 2); i++) {
		points.push(vertices[next]);
		points.push(vertices[previous]);
		points.push(vertices[0]);

		previous = next;
		next = next + 1;
	}

	return points;
}
